	buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "com.avast.gradle:gradle-docker-compose-plugin:0.17.6"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.avast.gradle.docker-compose' version '0.17.6'
	id 'jacoco'
}

group = 'by.koronatech'
version = '0.0.1'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot'
	implementation 'org.springframework.boot:spring-boot-autoconfigure'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.mapstruct:mapstruct:1.6.3'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'ch.qos.logback:logback-classic:1.4.12'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'


	compileOnly 'org.projectlombok:lombok'

	implementation 'org.postgresql:postgresql:42.7.2'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core:5.12.0'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.11"
}

test {
	jvmArgs '-XX:+EnableDynamicAgentLoading'
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'by/koronatech/office/api/controller/**',
					'by/koronatech/office/api/dto/**',
					'by/koronatech/office/OfficeApplication.class'
			])
		}))
	}
	executionData.setFrom(fileTree(buildDir).include('jacoco/test.exec'))
}

jar {
	manifest {
		attributes 'Main-Class': 'by.koronatech.office.OfficeApplication'
	}
}